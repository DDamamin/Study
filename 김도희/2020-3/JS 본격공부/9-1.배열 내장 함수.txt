JS 본격 공부

- 사이트 : https://learnjs.vlpt.us/basics/02-variables.html 참고


9-1. 배열 내장 함수

저번과 이어서 배열에서 유용하게 사용되는 내장 함수에 대해 다룬다.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1 ] splice
- 배열 내에서 특정 항목을 제거할 때 사용한다.

예 )
const num = [10 , 20 , 30 , 40 , 50];
const index = num.indexOf(20);
num.splice(index , 1);       // splice의 첫번째 매개변수는 어떤 인덱스부터 지울지 , 두번째 매개변수는 그 인덱스부터 몇개를 지울지를 의미한다.
console.log(num);   // [ 10 , 30 , 40 , 50 ]이 출력됨 

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2 ] slice
- splice와 비슷하며, 배열을 잘라낼 때 사용하는데 기존 배열을 건들지 않는다.

예 ) 
const num = [10 , 20 , 30 , 40 , 50];
const sliced = num.slice( 0 , 3 );  //0부터 3전까지 남김(즉 0 , 1 , 2를 남김)   첫번째 매개변수는 어디서부터, 두번쨰는 어디까지 자를지를 의미한다.

console.log(num);       // [10, 20, 30, 40, 50] 이 출력
console.log(sliced);    // [10, 20, 30] 이 출력

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3 ] shift 와 pop

- shift는 첫번째 원소를 배열에서 추출한다.(추출한 원소는 사라진다.)
예 )
const num = [10 , 20 , 30 , 40 , 50];
const value = num.shift( );
console.log(value);     // 10이 출력됨
console.log(num);      // [ 20 , 30 , 40 , 50] 가 출력됨

=================================================

- pop은 마지막 원소를 배열에서 추출한다.(추출한 원소는 사라진다.)
예 )
const num = [10 , 20 , 30 , 40 , 50];
const value = num.pop( );
console.log(value);     // 50이 출력됨
console.log(num);      // [ 10 , 20 , 30 , 40] 가 출력됨

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4 ] unshift
- shift와는 반대로 배열 맨 앞에 새로운 원소를 추가한다.
예 )
const num = [10 , 20 , 30 , 40 , 50];
const value = num.unshift( 5 );
console.log(num);      // [ 5, 10, 20 , 30 , 40 , 50] 가 출력됨

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5 ] concat
- 여러 개의 배열을 하나의 배열로 합쳐준다.
예)
const arr1 = [1, 2, 3];
const arr2 = [4, 5, 6];
const Arr = arr1.concat(arr2);

console.log(Arr);          // [1, 2, 3, 4, 5, 6]; 이 출력됨(concat함수는 arr1 과 arr2에 변화를 주지 않는다.)

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6 ] join
- 배열 안의 값들을 문자열 형태로 합쳐준다.
예 )
const arr = [1, 2, 3];
console.log(arr.join( ));     // 1,2,3  으로 합쳐짐
console.log(arr.join(' '));     // 1 2 3으로 합쳐짐
console.log(arr.join(', '));       // 1, 2, 3 으로 합쳐짐

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
7 ] reduce
- 주어진 배열의 총합을 구하라

예 )
const num = [10 ,20, 30];

let sum = 0;
num.forEach(n => {
   sum += n;
});

console.log(sum);       // 60이 출력됨

==============================

reduce활용 예 )
const num = [10 ,20, 30];

let sum = num.reduce((accumulate, current) => accumulator + current, 0);   // 첫번째 매개변수는 accumulator와 current의 결과를 반환하는 콜백함수
                                                                                                    // 두번째 매개변수는 reduce함수에서 사용할 초깃값
console.log(sum);      // 60이 출력됨