JS 본격 공부

- 사이트 : https://learnjs.vlpt.us/basics/02-variables.html 참고


6. 객체

객체는 우리가 변수나 상수를 사용할 때 하나의 이름 안에 여러 종류의 값들을 넣을 수 있도록 해준다.
예 ) const MyPet = {
         name : 'koko' ,
         age : 1
      };
  
     console.log(MyPet.name);      //결과 값으로 koko가 출력 됨(객체 이름에 . 을 붙이면 객체 안에 해당 값을 불러올 수 있다.)
     console.log(MyPet.age);        //결과 값으로 1이 출력 됨


- 객체를 선언하기 위해서는  { 스코프 } 문자 안에 원하는 값들을 집어 넣으면 된다.(형태는 [ 키값 : 원하는 값 ] 이다.)
예 ) width : 100
      shape : 'circle'
      'shape name' : 'MyCircle'  //키 값은 공백이 있으면 안되고 공백이 필요하면 따옴표( '" )로 감싼 뒤 문자열로 넣어 준다.


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1 ] 객체를 사용해 MyPet 정보 출력하기
예 ) const MyDog = {
        name : 'Che';
        age : 1;
     };

      const MyCat = {
        name : 'Cha';
        age : 2;
     };

    console.log(MyDog);    //결과 값으로  object {name : 'che' , age : 1}  이 출력 됨
    console.log(MyCat);    //결과 값으로  object {name : 'cha' , age : 2}  이 출력 됨


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
함수에서 객체를 파라미터(매개변수)로 받기
예 ) const MyDog = {
        name : 'Che';
        age : 1;
      };

      const MyCat = {
        name : 'Cha';
        age : 2;
      };
 
     function print(pet) {
          const text = `${pet.name} 의 나이는 ${pet.age}살 입니다.`;  //text안에 문자열들을 담음
          console.log(text);    //text 출력
     }

     print(MyDog);      // 결과 값으로 ( che의 나이는 1살 입니다. ) 가 출력 됨 
     print(MyCat);      // 결과 값으로 ( cha의 나이는 2입니다. ) 가 출력 됨 


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
객체 비구조화 할당
- 객체 구조 분해라 불리기도 하는 문법이다.(사용 시 코드를 더 짧고 보기 좋게 작성할 수 있다.)

예1 ] const MyDog = {
        name : 'Che';
        age : 1;
      };

      const MyCat = {
        name : 'Cha';
        age : 2;
      };
 
     function print(pet) {
          const { name , age } = pet;  //추가된 문장 ( 이 코드가 객체에서 값들울 추출한 뒤 새로운 상수로 선언해준다.)
          const text = `${name} 의 나이는 ${age}살 입니다.`;  //text안에 문자열들을 담음(전과는 다르게 name 과 age로만 사용함)
          console.log(text);    //text 출력
     }

     print(MyDog);      // 결과 값으로 ( che의 나이는 1살 입니다. ) 가 출력 됨 
     print(MyCat);      // 결과 값으로 ( cha의 나이는 2입니다. ) 가 출력 됨 


- 피라미터에 객체 비구조화 할당 시키기

예2 ] const MyDog = {
        name : 'Che';
        age : 1;
      };

      const MyCat = {
        name : 'Cha';
        age : 2;
      };
 
     function print({ name , age }) {   //달라진 문장 ( 이 코드가 객체에서 값들울 추출한 뒤 새로운 상수로 선언해준다.)
          const text = `${name} 의 나이는 ${age}살 입니다.`;  //text안에 문자열들을 담음(전과는 다르게 name 과 age로만 사용함)
          console.log(text);    //text 출력
     }

     print(MyDog);      // 결과 값으로 ( che의 나이는 1살 입니다. ) 가 출력 됨 
     print(MyCat);      // 결과 값으로 ( cha의 나이는 2입니다. ) 가 출력 됨 


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
객체 안에 함수 넣기

예 ) const MyDog = {
        name : 'Che';
        sound : '왈왈';
        say : function Say( ) {             //객체 내에서는 함수의 이름이 없어도 된다.( function Say( ) 자리에 function( ) 를 집어넣어도 됨 )
           console.log(this.sound);       //this란 자신이 속해있는 객체를 뜻하는 말로 옆에서는 sound가 포함된 객체인 MyDog를 말한다. 
      };

      MyDog.say();       //결과 값으로    왈왈    이 출력된다.


- 객체 내에 삽입된 함수는 화살표 함수 형태를 사용할 수 없다.(function으로 선언한 함수는 this가 자신이 속한 객체를 가르키지만 화살표 함수는 다르다. ) 
예 ) const MyDog = {
        name : 'Che';
        sound : '왈왈';
        say :  ( ) => {                        // 화살표 함수 형태로 바꿈
           console.log(this.sound);       //여기서 this는 이 객체가 아닌 완전 상위 객체인 window를 가리킨다.  즉 에러 발생
      };

      MyDog.say();       //오류 발생
