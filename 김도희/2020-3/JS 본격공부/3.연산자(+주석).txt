JS 본격 공부

- 사이트 : https://learnjs.vlpt.us/basics/02-variables.html 참고

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
연산자

연산자란 프로그래밍에서 특정한 연산을 하도록 하는 문자이다.
예 ) let num = 3;   -> 여기서  사용된 = 가 바로 연산자이다.
          num = 5;   -> 연산자의 종류는 다양하며 = 문자는 대입연산자에 해당한다.


주석(//)
- 코드에 메모를 다는 것과 같으며 주석 처리된 구문은 실제로 컴파일 과정중 처리되지 않는다.
예 ) const a = 1;    // 상수 a에 1을 집어넣음(주석 처리를 했으므로 문장은 컴파일 되지 않음)

-또한 여러줄을 한 번에 주석 처리할 때에는 /* 내용 */을 사용한다.
예 ) /*주석 처리하는 방법을 배워보아요. */

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1) 산술 연산자

- 사칙 연산과 같은 작업을 하는 연산자를 말한다.
(  +  :  플러스      -  :  마이너스       *   :   곱하기         /   :   나누기   )  //  이 4가지가 가장 기본인 산술 연산자이다. 이 외에도 몇가지 더 존재한다.

예 ) let plus = 1+3;
     console.log(plus);   // 결과값으로 4가 출력된다. 이 외에도 - , * , / 등이 사용가능하다.


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2) 증감 연산자

- 산술 연산자의 일부이며 전위 , 후위 증감 연산자가 있다. (전위 연산자는 해당 값 앞에 ++ , --가 붙고 후위 연산자는 해당 값 뒤에 ++ , --가 붙음)
예 )  전위 증가 :  ++a   후위 증가 :  a++    전위 감소 :  --a    후위 감소 :  a--

-  이때 전위냐 후위냐에 따라 결과값이 달라지게 된다.(덧셈 뺄셈 전부 같으며 1씩 증가하거나 감소한다. )
예 ) let num = 1;
     console.log(num++);  // 결과 값이 1이 나옴 ( 후위 연산은 문장을 실행한(console로 num값을 찍은) 뒤에 값을 증가시키기 때문에 1이 출력됨)
     console.log(++num);  // 결과 값이 3이 나옴 ( 전위 연산은 문장 실행 전에 값이 증가하므로 위에서 증가한 2가 1만큼 증가된 3이 출력됨)

     let num = 3;
     console.log(num--);  // 결과 값이 3이 나옴 ( 후위 연산은 문장을 실행한(console로 num값을 찍은) 뒤에 값을 감소시키기 때문에 3이 출력됨)
     console.log(--num);  // 결과 값이 1이 나옴 ( 전위 연산은 문장 실행 전에 값이 감소하므로 위에서 감소한 2가 1만큼 감소된 1이 출력됨)


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3) 대입 연산자

- 특정 값에다 바로 연산한 값을 설정할 때 사용되는 연산자이다.
예 ) let num = 5;
      num = num + 5;   ( num += 5; 와 같음 )  더하기 말고도 - , * , / 도 가능하다.


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4) 논리 연산자

- 불리언(Boolean) 타입인 true/false를 위한 연산자이며 총 3가지가 존재한다.
예 )   !(NOT) ,   &&(AND)  ,   ||(OR)  -> ( OR은 \를 shift를 누룬 상태로 누르면 써짐 ) 


[1]  ! (NOT)
- 값 앞에 ! 를 붙이게 되면 true , false가 바뀌게 된다.
예 ) const  a = !true;   //  결과 값으로 false가 출력됨
      const b = !false;   //  결과 값으로 true가 출력됨    


[2] && (AND)
- 값 사이에 &&를 붙이게 되면 양쪽 값이 둘 다 true일때만 결과 값이 true가 된다.
예 ) const a = true && true;     //  결과 값으로 true가 출력됨
      const b = true && false;    //  결과 값으로 false가 출력됨
      const c = false && false;    //  결과 값으로 false가 출력됨


[3] || (OR)
- 값 사이에 ||를 붙이게 되면 양쪽 값중 하나라도 true가 될경우 결과 값이 true가 된다. (즉 두 값이 둘 다 false일때만 false가 됨)
예 )  const a = true && true;     //  결과 값으로 true가 출력됨
       const b = true && false;    //  결과 값으로 true가 출력됨(AND와의 차이점)
       const c = false && false;    //  결과 값으로 false가 출력됨



기본적인 연산 순서는  NOT - AND - OR 순이다.


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5) 비교 연산자

- 두 값을 비교할때 사용되는 연산자이다.


[1] ===
- 두 값이 일치하는지 확일할 때 사용된다.(만약 일치한다면 true, 일치하지 않으면 false가 나타난다.)
예 ) const a = 1;
      cosnt b = 1; 
     const compare = a === b;     //   compare이라는 상수 안에 a === b의 값(true 아님 false)를 담음
     console.log(compare);           //    compare값인 true을 출력함( a와 b가 같았기 때문에 true가 출력됨. 만약 값이 다르다면 false가 출력됨)



[2] ==
- =을 2개 사용하더라도 비교가 가능함. 단 ===과는 다르게 타입을 검사하지는 않음(즉 문자 숫자 상관없이 비교가능)
예 ) const a = 1;
      const b = '1';	
      const compare = a == b;   //   compare이라는 상수 안에 a == b의 값(true 아님 false)를 담음
      console.log(compare);   //   compare값인 true을 출력함( 데이터의 형은 다르지만(각각 숫자와 문자) a와 b의 형태가 같았기 때문에 true가 출력됨)

- 이 외에도 0과 false , null과 undifined는 같은 값 취급을 받음


- 결과적으로는 ==보다는 ===를 더 추천함(더 정확하고 실수를 줄일 수 있음)



[3] !==  ,  !=
- 두 값이 일치하지 않은지 확인할 때 사용함. 일치하지 않을 경우 true , 일치할 경우 false( !=는 ==과 같게 타입 검사를 하지 않음)
예 ) const num = 'a' !== 'b';       // true(값이 다름)
      const num = 'a' != 'b';         // true(값이 다름)
      const num = 1 !== '1';        //  true(타입 형이 다르므로)
      const num = 1 != '1';          //  false(타입 형을 검사하지 않으므로)



[4] 대소 관계 ( < , > , <= , >= )
- 두 값 중 무엇이 크고 작은지 비교할 때 사용(수학에서 사용하던 것과 사용법이 비슷함)
예 ) const a = 1;
      const b = 2;
      const c = 3;
      console.log(a < b);      //  true
      console.log(b < a);      //  false
      console.log(b <= c);    //  true
      console.log(a >= c);    //  false
      console.log(b < c);     //   true

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
문자열을 붙이는 법
- 문자열을 붙이기 위하여 +를 사용한다.
예 ) const FirstName = '길동';
      const LastName = '홍';
      const Name = LastName + FirstName;   //Name안에 홍과 길동을 붙인('홍' + '길동') '홍길동'이 담기게 된다.
      console.log(Name);       // 홍길동  이 출력됨