JS 본격 공부

- 사이트 : https://learnjs.vlpt.us/basics/02-variables.html 참고


8. 반복문

특정 작업을 반복적으로 할 때 사용하는 구문이다.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1 ] for
- for문은 기본적인 반복문으로 값의 변화에 따라 조건이 만족할 경우 계속 반복되는 구문이다.
예 ) for ( let i = 0; i < 5; i++) {
           console.log( i );      // 0 1 2 3 4 가 출력됨
     }

사용법은 for ( 초기 구문; 조건 구문; 변화 구문; ) { 실행코드 }
- for문을 주로 사용할 때 변화 구문에 보통 i++(1씩 증가)을 사용하지만 때에 따라서는 i--(1씩 감소)를 사용하기도 한다.
예 ) for ( let i = 5; i > 0; i--) {
           console.log( i );      // 5 4 3 2 1 이 출력됨
     }



배열과 for문 사용하기
예 ) const name = [ 'Kim' , 'Lee' , 'Park' ];
     
       for(let i = 0; i < name.length; i++) {   // name.length는 3이므로 배열의 0 1 2 번째까지 반복
            console.log(name[i]);     //순서대로 Kim Lee Park이 출력됨
       }

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2 ] while
- while문은 특정 조건이 참이라면 계속 반복하는 반복문이다. while문은 조건만 확인한 뒤 실행하기 때문에 조건문 내부에 변화를 주어야 한다.
예 )   let i = 0;
        while(let i < 5) {
        console.log( i );      // 0 1 2 3 4 가 출력됨
         i++;
      } 

while문은 false가 되지 않으면 무한 반복을 하므로 신중하게 사용해야 한다.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3 ] for ~ of문
- 배열에 관한 반복문을 돌리기 위해 사용하는 반복문이다. (이 구문은 배열의 내장함수를 대신 사용하면 되기 때문에 사용할 일이 많이 없다.)
예 ) let number = [ 1, 2, 3, 4, 5 ];
      for (let num of number) {
             console.log(num);      // 1 2 3 4 5가 출력됨
      }

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4 ] for ~ in문
- 객체의 정보를 배열 형태로 받아올 수 있는 함수이다.

예1 )   const MyDog = {
          name : 'dog' , 
          age : 2 , 
      };

      console.log(Object.entries(MyDog));      //   [ [ 0 : Array[2]   0 : "name"  1 : "dog" ]    [ 1 : Array[2]   0 : "age"  1 : "2" ] ]
      console.log(Object.keys(MyDog));         //  { "name" , "age" }가 출력됨
      console.log(Object.values(MyDog));      //   { "dog" , 2 } 가 출력됨


각 함수의 역할은 아래와 같다.
Object.entries: [[키, 값], [키, 값]] 형태의 배열로 변환
Object.keys: [키, 키, 키] 형태의 배열로 변환
Object.values: [값, 값, 값] 형태의 배열로 변환


- 객체가 지닌 값에 대해 반복을 하고 싶으면 위의 구문 아니면 for ~ in 구문을 사용하면 된다.
예2 )   const MyDog = {
          name : 'dog' , 
          age : 2 , 
      };

      for ( let key in MyDog ) {
           console.log(`${key} : ${MyDog[key]}`);     // name : dog      age : 2  가 출력됨 
       }

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
break 와 continue
- break와 continue를 사용하면 반복문을 벗어나거나, 다음 루프가 돌도록 할 수 있다.
예 )   for ( let i = 0; i < 10; i++) {
           if( i === 3) continue;   //밑을 생략하고 다음루프로 넘어가기( i가 3일때 밑에 구문을 실행하지 않고 for문으로 바로 4로 넘어간다. )
           console.log( i );      // 0 1 2 4 5가 출력됨
           if( i === 5 ) break;   //    반복문을 빠져나오기(5에서 끝내기)
     }