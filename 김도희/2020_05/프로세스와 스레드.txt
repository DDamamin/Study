프로세스 : 자원을 할당받고 그 자원을 제어하여 우리가 원하는 목적을 달성하는 일

이때 제어만 따로 떼어다 분리한 것을 스레드라 한다.  ( 여러개 있을 수 있음 ) 

같은 프로세스의 스레드들은 동일한 주소 공간 공유


스레드(Thread)  - Light Weight Process
프로세서(e.g, CPU)활용의 기본 단위

구성요소
Thread ID
Register set(PC, SP 등)
Stack(i.e, local data)

제어 요소 외 코드, 데이터 및 자원 들은 프로세스 내 다른 스레드들과 공유
( 전통적 프로세스 = 단일 스레드 프로세스 )

제어 요소가 한 개이면 Single-thread , 여러 개라면 Multi-thread라 함

스레드의 장점

사용자 응답성 : 일부 스레드의 처리가 지연되어도, 다른 스레드는 작업을 계속 처리 가능
자원 공유 : 자원을 공유해서 효율성 증가 (커널의 개입을 피할 수 있음)
경제성 : 프로세스의 생성, context switch에 비해 효율적
멀티 프로세서 활용 : 병렬처리를 통해 성능 향상


Outline - 스레드의 개념


스레드의 구현

사용자 수준 스레드

사용자 영역의 스레드 라이브러리로 구현 됨 (스레드의 생성, 스케줄링 등)

- 커널은 스레드의 존재를 모름(커널의 개입을 받지 않아 생성 및 관리 부하가 적고 이식성이 높음)
- 커널은 프로세스 단위로 자원 할당 (하나의 스레드가 block 상태가 되면, 모든 스레드가 대기)


커널 수준 스레드

OS가 직접 관리

- 커널 영역에서 스레드의 생성 관리 수행(Context switching 등 부하가(overhead) 큼)
- 커널이 각 스레드를 개별적으로 관리, 프로세스 내 스레드들이 병행 수행 가능
  (하나의 스레드가 block 상태가 되어도 , 다른 스레드는 계속 작업 수행 가능)


Multi-Threading Model

스레드의 구현

다대일(n:1) 모델  -    사용자 수준 스레드
일대일(1:1) 모델  -    커널 수준 스레드
다대다(n:m) 모델 -     n > m 혼합형 스레드


혼합형 (n:m) 스레드

n개 사용자 수준 스레드 - m개의 커널 스레드(n>m)

- 사용자는 원하는 수만큼 스레드 사용
- 커널 스레드는 자신에게 할당된 하나의 사용자 스레드가 block상태가 되어도, 다른 스레드 수행가능
(병행 처리 가능)

효율적이면서도 유연함
